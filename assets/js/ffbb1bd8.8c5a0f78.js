(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{124:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return c})),a.d(t,"metadata",(function(){return b})),a.d(t,"toc",(function(){return s})),a.d(t,"default",(function(){return p}));var n=a(3),r=a(8),l=(a(0),a(130)),i=a(134),o=a(135),c={id:"serve",title:"serve",sidebar_label:"serve"},b={unversionedId:"serve",id:"serve",isDocsHomePage:!1,title:"serve",description:"Serves a full featured GraphQL CRUD API with subscriptions and data synchronization running in just a few seconds without writing a single line of code - all you need is a data model .graphql file.",source:"@site/docs/command-serve.md",sourceDirName:".",slug:"/serve",permalink:"/serve",editUrl:"https://github.com/urigo/graphql-cli/edit/master/website/docs/command-serve.md",version:"current",sidebar_label:"serve",frontMatter:{id:"serve",title:"serve",sidebar_label:"serve"},sidebar:"docs",previous:{title:"introspect",permalink:"/introspect"},next:{title:"similar",permalink:"/similar"}},s=[{value:"Installation",id:"installation",children:[]},{value:"Usage",id:"usage",children:[]},{value:"Enable Data Synchronization",id:"enable-data-synchronization",children:[]}],d={toc:s};function p(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(l.b)("wrapper",Object(n.a)({},d,a,{components:t,mdxType:"MDXLayout"}),Object(l.b)("p",null,"Serves a full featured ",Object(l.b)("a",{parentName:"p",href:"https://graphqlcrud.org/"},"GraphQL CRUD")," API with subscriptions and data synchronization running in just a few seconds without writing a single line of code - all you need is a data model ",Object(l.b)("inlineCode",{parentName:"p"},".graphql")," file."),Object(l.b)("p",null,"GraphQL Serve is a CLI tool that leverages the power of Graphback to generate a codeless Node.js GraphQL API complete with schema and CRUD resolvers and an in-memory MongoDB database.  "),Object(l.b)("h3",{id:"installation"},"Installation"),Object(l.b)(i.a,{defaultValue:"yarn",values:[{label:"yarn",value:"yarn"},{label:"npm",value:"npm"}],mdxType:"Tabs"},Object(l.b)(o.a,{value:"yarn",mdxType:"TabItem"},Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"yarn global add @graphql-cli/serve\n"))),Object(l.b)(o.a,{value:"npm",mdxType:"TabItem"},Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"npm i -g @graphql-cli/serve\n")))),Object(l.b)("h3",{id:"usage"},"Usage"),Object(l.b)("p",null,"The bare minimum you need is a GraphQL file with your data models. Create a file called ",Object(l.b)("inlineCode",{parentName:"p"},"Note.graphql")," and add the following:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-graphql"},'""" @model """\ntype Note {\n  _id: GraphbackObjectID!\n  title: String!\n  description: String\n  likes: Int\n}\n\nscalar GraphbackObjectID\n')),Object(l.b)("p",null,"The ",Object(l.b)("inlineCode",{parentName:"p"},"@model")," annotation indicates that ",Object(l.b)("inlineCode",{parentName:"p"},"Note")," is a data model and Graphback will generate resolvers, a CRUD service and data source for it. You can learn how to build more complex data models in ",Object(l.b)("a",{parentName:"p",href:"https://graphback.dev/docs/model/datamodel#model"},"Data Model"),"."),Object(l.b)("h4",{id:"running-your-codeless-graphql-server"},"Running your codeless GraphQL server"),Object(l.b)("p",null,"To start your server, run the following command from the same directory as ",Object(l.b)("inlineCode",{parentName:"p"},"Note.graphql"),":"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-bash"},"graphql serve Note.graphql\n")),Object(l.b)("p",null,"This will start a GraphQL server on a random port using the ",Object(l.b)("inlineCode",{parentName:"p"},"Note.graphql")," data models we just added."),Object(l.b)("p",null,"You can customise the directory of the data models:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-bash"},"graphql serve ./path/to/models\n")),Object(l.b)("p",null,"You can also specify where to load the data models from with a Glob pattern:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-bash"},"graphql serve ./schema/**/*.graphql\n")),Object(l.b)("p",null,"You can specify which port to start the server on:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-bash"},"$ graphql serve ./path/to/models --port 8080\n\nStarting server...\n\nListening at: http://localhost:8080/graphql\n")),Object(l.b)("h3",{id:"enable-data-synchronization"},"Enable Data Synchronization"),Object(l.b)("p",null,"GraphQL Serve can also operate on data sync models. Under the hood this uses the ",Object(l.b)("a",{parentName:"p",href:"https://graphback.dev/docs/datasync/intro"},"Data Sync")," package.\nTo enable data synchronization, all we need to do is enable datasync capabilities on our models via the ",Object(l.b)("inlineCode",{parentName:"p"},"@datasync")," annotation."),Object(l.b)("p",null,"For the ",Object(l.b)("inlineCode",{parentName:"p"},"Note")," model defined above, this would look like: "),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-graphql"},'""" \n@model\n@datasync \n"""\ntype Note {\n  _id: GraphbackObjectID!\n  title: String!\n  description: String\n  likes: Int\n}\n\nscalar GraphbackObjectID\n')),Object(l.b)("p",null,"Once we have a model with datasync capabilities, we can run our GraphQL server by enabling data synchronization as shown below:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-bash"},"graphql serve Note.graphql --datasync\n")),Object(l.b)("p",null,"Conflict resolution strategies for datasync enabled models can be specified via the --conflict option:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-bash"},"graphql serve Note.graphql --datasync --conflict=clientSideWins\n")),Object(l.b)("p",null,"This defaults to ClientSideWins, if unset."),Object(l.b)("p",null,"The TTL for delta tables, can also be set using the --deltaTTL option:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-bash"},"graphql serve Note.graphql --datasync --deltaTTL=172800\n")),Object(l.b)("p",null,"This value defaults to ",Object(l.b)("inlineCode",{parentName:"p"},"172800")," when unused"),Object(l.b)("h4",{id:"arguments"},"Arguments"),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",{parentName:"tr",align:null},"argument"),Object(l.b)("th",{parentName:"tr",align:null},"description"),Object(l.b)("th",{parentName:"tr",align:null},"default"))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("inlineCode",{parentName:"td"},"Model")),Object(l.b)("td",{parentName:"tr",align:null},"Directory to search for data models"),Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("inlineCode",{parentName:"td"},"undefined"))))),Object(l.b)("h4",{id:"options"},"Options"),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",{parentName:"tr",align:null},"option"),Object(l.b)("th",{parentName:"tr",align:null},"alias"),Object(l.b)("th",{parentName:"tr",align:null},"description"),Object(l.b)("th",{parentName:"tr",align:null},"default"))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("inlineCode",{parentName:"td"},"--port")),Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("inlineCode",{parentName:"td"},"-p")),Object(l.b)("td",{parentName:"tr",align:null},"Port on which to run the HTTP server"),Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("inlineCode",{parentName:"td"},"Random port"))),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("inlineCode",{parentName:"td"},"--datasync")),Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("inlineCode",{parentName:"td"},"--ds")),Object(l.b)("td",{parentName:"tr",align:null},"Enable datasynchronization features"),Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("inlineCode",{parentName:"td"},"false"))),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("inlineCode",{parentName:"td"},"--deltaTTL")),Object(l.b)("td",{parentName:"tr",align:null},"N/A"),Object(l.b)("td",{parentName:"tr",align:null},"Specify a conflict resolution strategy with --datasync. Choices: ",Object(l.b)("inlineCode",{parentName:"td"},"clientSideWins"),", ",Object(l.b)("inlineCode",{parentName:"td"},"serverSideWins"),", ",Object(l.b)("inlineCode",{parentName:"td"},"throwOnConflict")),Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("inlineCode",{parentName:"td"},"clientSideWins"))),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("inlineCode",{parentName:"td"},"--conflict")),Object(l.b)("td",{parentName:"tr",align:null},"N/A"),Object(l.b)("td",{parentName:"tr",align:null},"Specify a TTL for delta tables with --datasync"),Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("inlineCode",{parentName:"td"},"172800"))))))}p.isMDXComponent=!0},129:function(e,t,a){"use strict";function n(e){var t,a,r="";if("string"==typeof e||"number"==typeof e)r+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(a=n(e[t]))&&(r&&(r+=" "),r+=a);else for(t in e)e[t]&&(r&&(r+=" "),r+=t);return r}t.a=function(){for(var e,t,a=0,r="";a<arguments.length;)(e=arguments[a++])&&(t=n(e))&&(r&&(r+=" "),r+=t);return r}},130:function(e,t,a){"use strict";a.d(t,"a",(function(){return d})),a.d(t,"b",(function(){return m}));var n=a(0),r=a.n(n);function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){l(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function c(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var b=r.a.createContext({}),s=function(e){var t=r.a.useContext(b),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},d=function(e){var t=s(e.components);return r.a.createElement(b.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},u=r.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,l=e.originalType,i=e.parentName,b=c(e,["components","mdxType","originalType","parentName"]),d=s(a),u=n,m=d["".concat(i,".").concat(u)]||d[u]||p[u]||l;return a?r.a.createElement(m,o(o({ref:t},b),{},{components:a})):r.a.createElement(m,o({ref:t},b))}));function m(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=a.length,i=new Array(l);i[0]=u;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:n,i[1]=o;for(var b=2;b<l;b++)i[b]=a[b];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,a)}u.displayName="MDXCreateElement"},132:function(e,t,a){"use strict";var n=a(0),r=a(133);t.a=function(){var e=Object(n.useContext)(r.a);if(null==e)throw new Error("`useUserPreferencesContext` is used outside of `Layout` Component.");return e}},133:function(e,t,a){"use strict";var n=a(0),r=Object(n.createContext)(void 0);t.a=r},134:function(e,t,a){"use strict";var n=a(0),r=a.n(n),l=a(132),i=a(129),o=a(91),c=a.n(o);var b=37,s=39;t.a=function(e){var t=e.lazy,a=e.block,o=e.defaultValue,d=e.values,p=e.groupId,u=e.className,m=Object(l.a)(),h=m.tabGroupChoices,O=m.setTabGroupChoices,j=Object(n.useState)(o),g=j[0],f=j[1],v=n.Children.toArray(e.children),N=[];if(null!=p){var y=h[p];null!=y&&y!==g&&d.some((function(e){return e.value===y}))&&f(y)}var w=function(e){var t=e.currentTarget,a=N.indexOf(t),n=d[a].value;f(n),null!=p&&(O(p,n),setTimeout((function(){var e,a,n,r,l,i,o,b;(e=t.getBoundingClientRect(),a=e.top,n=e.left,r=e.bottom,l=e.right,i=window,o=i.innerHeight,b=i.innerWidth,a>=0&&l<=b&&r<=o&&n>=0)||(t.scrollIntoView({block:"center",behavior:"smooth"}),t.classList.add(c.a.tabItemActive),setTimeout((function(){return t.classList.remove(c.a.tabItemActive)}),2e3))}),150))},C=function(e){var t,a;switch(e.keyCode){case s:var n=N.indexOf(e.target)+1;a=N[n]||N[0];break;case b:var r=N.indexOf(e.target)-1;a=N[r]||N[N.length-1]}null===(t=a)||void 0===t||t.focus()};return r.a.createElement("div",{className:"tabs-container"},r.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:Object(i.a)("tabs",{"tabs--block":a},u)},d.map((function(e){var t=e.value,a=e.label;return r.a.createElement("li",{role:"tab",tabIndex:g===t?0:-1,"aria-selected":g===t,className:Object(i.a)("tabs__item",c.a.tabItem,{"tabs__item--active":g===t}),key:t,ref:function(e){return N.push(e)},onKeyDown:C,onFocus:w,onClick:w},a)}))),t?Object(n.cloneElement)(v.filter((function(e){return e.props.value===g}))[0],{className:"margin-vert--md"}):r.a.createElement("div",{className:"margin-vert--md"},v.map((function(e,t){return Object(n.cloneElement)(e,{key:t,hidden:e.props.value!==g})}))))}},135:function(e,t,a){"use strict";var n=a(0),r=a.n(n);t.a=function(e){var t=e.children,a=e.hidden,n=e.className;return r.a.createElement("div",{role:"tabpanel",hidden:a,className:n},t)}}}]);