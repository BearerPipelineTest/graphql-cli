(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[612],{5318:function(e,n,t){"use strict";t.d(n,{Zo:function(){return u},kt:function(){return d}});var r=t(7378);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var p=r.createContext({}),c=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=c(e.components);return r.createElement(p.Provider,{value:n},e.children)},s={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),m=c(t),d=o,g=m["".concat(p,".").concat(d)]||m[d]||s[d]||a;return t?r.createElement(g,i(i({ref:n},u),{},{components:t})):r.createElement(g,i({ref:n},u))}));function d(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=m;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var c=2;c<a;c++)i[c]=t[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},1821:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return i},metadata:function(){return l},toc:function(){return p},default:function(){return u}});var r=t(9603),o=t(120),a=(t(7378),t(5318)),i={id:"custom-commands",title:"Custom commands",sidebar_label:"Custom commands"},l={unversionedId:"custom-commands",id:"custom-commands",isDocsHomePage:!1,title:"Custom commands",description:"Writing your own commands",source:"@site/docs/custom-commands.md",sourceDirName:".",slug:"/custom-commands",permalink:"/custom-commands",editUrl:"https://github.com/urigo/graphql-cli/edit/master/website/docs/custom-commands.md",version:"current",sidebar_label:"Custom commands",frontMatter:{id:"custom-commands",title:"Custom commands",sidebar_label:"Custom commands"},sidebar:"docs",previous:{title:"Migration",permalink:"/migration"}},p=[{value:"Writing your own commands",id:"writing-your-own-commands",children:[{value:"TL;DR",id:"tldr",children:[]},{value:"Getting Started",id:"getting-started",children:[]}]},{value:"Testing your plugin locally",id:"testing-your-plugin-locally",children:[]},{value:"Loading GraphQL Schema",id:"loading-graphql-schema",children:[]},{value:"Error Handling",id:"error-handling",children:[]}],c={toc:p};function u(e){var n=e.components,t=(0,o.Z)(e,["components"]);return(0,a.kt)("wrapper",(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"writing-your-own-commands"},"Writing your own commands"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"graphql-cli")," allow you to write your own plugin/extenion, and intergrate external tools and configuration, and run it from a single CLI."),(0,a.kt)("p",null,"The current implementation of ",(0,a.kt)("inlineCode",{parentName:"p"},"graphql-cli")," is using ",(0,a.kt)("a",{parentName:"p",href:"https://yargs.js.org/"},"Yargs")," to manage it's CLI commands."),(0,a.kt)("p",null,"Plugins and extension are treated as NodeJS module by the ",(0,a.kt)("inlineCode",{parentName:"p"},"graphql-cli"),", so it means you can use JavaScript/TypeScript/Any other super-set of JavaScript to write your extension. It means that you plugin will be loaded by it's name under ",(0,a.kt)("inlineCode",{parentName:"p"},"node_modules")," - for example ",(0,a.kt)("inlineCode",{parentName:"p"},"graphql-cli my-custom-plugin ..."),"."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"graphql-cli")," also supports ",(0,a.kt)("inlineCode",{parentName:"p"},"graphql-config"),", so it can help you easily load your GraphQL schema, operations and configuration from a unified config file."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"If you are wrapping an existing tool that has it's own CLI already, consider to expose a programatic API so it will be easier to consume.")),(0,a.kt)("h3",{id:"tldr"},"TL;DR"),(0,a.kt)("p",null,"We have a ready-to-use boilerplate for that purpose, ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/dotansimha/graphql-cli-plugin-example"},"you can find it here"),"."),(0,a.kt)("p",null,"Also, inside this repo, under ",(0,a.kt)("inlineCode",{parentName:"p"},"packages/commands")," you can find a set of plugins implementation you can use as reference."),(0,a.kt)("h3",{id:"getting-started"},"Getting Started"),(0,a.kt)("p",null,"Start by creating a simple JavaScript/TypeScript project, according to your preference. Install ",(0,a.kt)("inlineCode",{parentName:"p"},"@graphql-cli/common")," package and use ",(0,a.kt)("inlineCode",{parentName:"p"},"defineCommand")," utility in your entry point (usually ",(0,a.kt)("inlineCode",{parentName:"p"},"index")," file):"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { defineCommand } from '@graphql-cli/common';\n\nexport default defineCommand((api) => {\n  return {};\n});\n")),(0,a.kt)("p",null,"To register your CLI command, give it a name first. Use the ",(0,a.kt)("inlineCode",{parentName:"p"},"command")," property:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"export default defineCommand((api) => {\n  return {\n    command: 'my-plugin',\n    async handler() {\n      // code here\n    },\n  };\n});\n")),(0,a.kt)("p",null,"Now, your plugin will be avaiable to use with the following command: ",(0,a.kt)("inlineCode",{parentName:"p"},"graphql my-plugin"),"."),(0,a.kt)("p",null,"You can also add custom validations, flags, default values and much more with Yargs. ",(0,a.kt)("a",{parentName:"p",href:"https://yargs.js.org/docs/#api-commandcmd-desc-module"},"You can read the documentation here"),"."),(0,a.kt)("h2",{id:"testing-your-plugin-locally"},"Testing your plugin locally"),(0,a.kt)("p",null,"To test your plugin locally, install ",(0,a.kt)("inlineCode",{parentName:"p"},"graphql-cli")," in your project as a ",(0,a.kt)("inlineCode",{parentName:"p"},"devDependency"),", and run the following command:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"graphql ./src/index.js\n")),(0,a.kt)("p",null,"If you registerd sub-commands, you should be able to run those this way:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"graphql ./src/index.js do-something\n")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"The path should point to the entry point of your script, and if you are using TypeScript - point to the compile file.")),(0,a.kt)("h2",{id:"loading-graphql-schema"},"Loading GraphQL Schema"),(0,a.kt)("p",null,"To easily load GraphQL schema, you can use ",(0,a.kt)("inlineCode",{parentName:"p"},"graphql-config"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { defineCommand } from '@graphql-cli/common';\n\nexport default defineCommand((api) => {\n  return {\n    command: 'my-plugin',\n    builder(build) {\n      return build.options({\n        project: {\n          type: 'string',\n          describe: 'Name of your project',\n        },\n      });\n    },\n    async handler(args) {\n      // use graphql-config and find configuration\n      const config = await api.useConfig();\n      // pick project\n      const project = args.project ? config.getProject(args.project) : config.getDefault();\n      // get schema\n      const schema = await config.getSchema();\n    },\n  };\n});\n")),(0,a.kt)("p",null,"If you are using ",(0,a.kt)("inlineCode",{parentName:"p"},"graphql-config")," to define your configuration, and you wish to load your extenion config from it, do:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"type MyConfig = { ... };\n\nconst extensionConfig = await config.extension<MyConfig>('my-plugin');\n")),(0,a.kt)("h2",{id:"error-handling"},"Error Handling"),(0,a.kt)("p",null,"If you wish to fail the execution of your plugin and report it back to GraphQL CLI host, simply throw an error:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { defineCommand } from '@graphql-cli/common';\n\nexport default defineCommand(() => {\n  return {\n    command: 'check-if-missing',\n    handler() {\n      if (somethingIsMissing) {\n        throw new Error(`Ooops, something is missing`);\n      }\n    },\n  };\n});\n")))}u.isMDXComponent=!0}}]);