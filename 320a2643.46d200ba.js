(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{65:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return i})),t.d(n,"metadata",(function(){return c})),t.d(n,"rightToc",(function(){return l})),t.d(n,"default",(function(){return u}));var a=t(2),r=t(6),o=(t(0),t(79)),i={id:"custom-commands",title:"Custom commands",sidebar_label:"Custom commands"},c={unversionedId:"custom-commands",id:"custom-commands",isDocsHomePage:!1,title:"Custom commands",description:"Writing your own commands",source:"@site/docs/custom-commands.md",slug:"/custom-commands",permalink:"/custom-commands",editUrl:"https://github.com/urigo/graphql-cli/edit/master/website/docs/custom-commands.md",version:"current",sidebar_label:"Custom commands",sidebar:"docs",previous:{title:"Migration",permalink:"/migration"}},l=[{value:"Writing your own commands",id:"writing-your-own-commands",children:[{value:"TL;DR",id:"tldr",children:[]},{value:"Getting Started",id:"getting-started",children:[]}]},{value:"Testing your plugin locally",id:"testing-your-plugin-locally",children:[]},{value:"Loading GraphQL Schema",id:"loading-graphql-schema",children:[]},{value:"Error Handling",id:"error-handling",children:[]}],p={rightToc:l};function u(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},p,t,{components:n,mdxType:"MDXLayout"}),Object(o.b)("h2",{id:"writing-your-own-commands"},"Writing your own commands"),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"graphql-cli")," allow you to write your own plugin/extenion, and intergrate external tools and configuration, and run it from a single CLI."),Object(o.b)("p",null,"The current implementation of ",Object(o.b)("inlineCode",{parentName:"p"},"graphql-cli")," is using ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://yargs.js.org/"}),"Yargs")," to manage it's CLI commands."),Object(o.b)("p",null,"Plugins and extension are treated as NodeJS module by the ",Object(o.b)("inlineCode",{parentName:"p"},"graphql-cli"),", so it means you can use JavaScript/TypeScript/Any other super-set of JavaScript to write your extension. It means that you plugin will be loaded by it's name under ",Object(o.b)("inlineCode",{parentName:"p"},"node_modules")," - for example ",Object(o.b)("inlineCode",{parentName:"p"},"graphql-cli my-custom-plugin ..."),"."),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"graphql-cli")," also supports ",Object(o.b)("inlineCode",{parentName:"p"},"graphql-config"),", so it can help you easily load your GraphQL schema, operations and configuration from a unified config file."),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"If you are wrapping an existing tool that has it's own CLI already, consider to expose a programatic API so it will be easier to consume.")),Object(o.b)("h3",{id:"tldr"},"TL;DR"),Object(o.b)("p",null,"We have a ready-to-use boilerplate for that purpose, ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/dotansimha/graphql-cli-plugin-example"}),"you can find it here"),"."),Object(o.b)("p",null,"Also, inside this repo, under ",Object(o.b)("inlineCode",{parentName:"p"},"packages/commands")," you can find a set of plugins implementation you can use as reference."),Object(o.b)("h3",{id:"getting-started"},"Getting Started"),Object(o.b)("p",null,"Start by creating a simple JavaScript/TypeScript project, according to your preference. Install ",Object(o.b)("inlineCode",{parentName:"p"},"@graphql-cli/common")," package and use ",Object(o.b)("inlineCode",{parentName:"p"},"defineCommand")," utility in your entry point (usually ",Object(o.b)("inlineCode",{parentName:"p"},"index")," file):"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import { defineCommand } from '@graphql-cli/common';\n\nexport default defineCommand((api) => {\n  return {};\n});\n")),Object(o.b)("p",null,"To register your CLI command, give it a name first. Use the ",Object(o.b)("inlineCode",{parentName:"p"},"command")," property:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"export default defineCommand((api) => {\n  return {\n    command: 'my-plugin',\n    async handler() {\n      // code here\n    },\n  };\n});\n")),Object(o.b)("p",null,"Now, your plugin will be avaiable to use with the following command: ",Object(o.b)("inlineCode",{parentName:"p"},"graphql my-plugin"),"."),Object(o.b)("p",null,"You can also add custom validations, flags, default values and much more with Yargs. ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://yargs.js.org/docs/#api-commandcmd-desc-module"}),"You can read the documentation here"),"."),Object(o.b)("h2",{id:"testing-your-plugin-locally"},"Testing your plugin locally"),Object(o.b)("p",null,"To test your plugin locally, install ",Object(o.b)("inlineCode",{parentName:"p"},"graphql-cli")," in your project as a ",Object(o.b)("inlineCode",{parentName:"p"},"devDependency"),", and run the following command:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),"graphql ./src/index.js\n")),Object(o.b)("p",null,"If you registerd sub-commands, you should be able to run those this way:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),"graphql ./src/index.js do-something\n")),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"The path should point to the entry point of your script, and if you are using TypeScript - point to the compile file.")),Object(o.b)("h2",{id:"loading-graphql-schema"},"Loading GraphQL Schema"),Object(o.b)("p",null,"To easily load GraphQL schema, you can use ",Object(o.b)("inlineCode",{parentName:"p"},"graphql-config"),":"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import { defineCommand } from '@graphql-cli/common';\n\nexport default defineCommand((api) => {\n  return {\n    command: 'my-plugin',\n    builder(build) {\n      return build.options({\n        project: {\n          type: 'string',\n          describe: 'Name of your project',\n        },\n      });\n    },\n    async handler(args) {\n      // use graphql-config and find configuration\n      const config = await api.useConfig();\n      // pick project\n      const project = args.project ? config.getProject(args.project) : config.getDefault();\n      // get schema\n      const schema = await config.getSchema();\n    },\n  };\n});\n")),Object(o.b)("p",null,"If you are using ",Object(o.b)("inlineCode",{parentName:"p"},"graphql-config")," to define your configuration, and you wish to load your extenion config from it, do:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"type MyConfig = { ... };\n\nconst extensionConfig = await config.extension<MyConfig>('my-plugin');\n")),Object(o.b)("h2",{id:"error-handling"},"Error Handling"),Object(o.b)("p",null,"If you wish to fail the execution of your plugin and report it back to GraphQL CLI host, simply throw an error:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ts"}),"import { defineCommand } from '@graphql-cli/common';\n\nexport default defineCommand(() => {\n  return {\n    command: 'check-if-missing',\n    handler() {\n      if (somethingIsMissing) {\n        throw new Error(`Ooops, something is missing`);\n      }\n    },\n  };\n});\n")))}u.isMDXComponent=!0},79:function(e,n,t){"use strict";t.d(n,"a",(function(){return s})),t.d(n,"b",(function(){return b}));var a=t(0),r=t.n(a);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=r.a.createContext({}),u=function(e){var n=r.a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},s=function(e){var n=u(e.components);return r.a.createElement(p.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},d=r.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),s=u(t),d=a,b=s["".concat(i,".").concat(d)]||s[d]||m[d]||o;return t?r.a.createElement(b,c(c({ref:n},p),{},{components:t})):r.a.createElement(b,c({ref:n},p))}));function b(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=d;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var p=2;p<o;p++)i[p]=t[p];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,t)}d.displayName="MDXCreateElement"}}]);